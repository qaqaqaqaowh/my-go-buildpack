curl -O https://storage.googleapis.com/golang/go1.11.5.linux-amd64.tar.gz
tar -xvf go1.11.5.linux-amd64.tar.gz
mv go /usr/local
export GOROOT=$HOME/go
export GOPATH=$HOME/work
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

loadEnvDir() {
    local envFlags=()
    envFlags+=("CGO_CFLAGS")
    envFlags+=("CGO_CPPFLAGS")
    envFlags+=("CGO_CXXFLAGS")
    envFlags+=("CGO_LDFLAGS")
    envFlags+=("GO_LINKER_SYMBOL")
    envFlags+=("GO_LINKER_VALUE")
    envFlags+=("GO15VENDOREXPERIMENT")
    envFlags+=("GOVERSION")
    envFlags+=("GO_INSTALL_PACKAGE_SPEC")
    envFlags+=("GO_INSTALL_TOOLS_IN_IMAGE")
    envFlags+=("GO_SETUP_GOPATH_IN_IMAGE")
    envFlags+=("GO_TEST_SKIP_BENCHMARK")
    envFlags+=("GLIDE_SKIP_INSTALL")
    local env_dir="${1}"
    if [ ! -z "${env_dir}" ]; then
        mkdir -p "${env_dir}"
        env_dir=$(cd "${env_dir}/" && pwd)
        for key in ${envFlags[@]}; do
            if [ -f "${env_dir}/${key}" ]; then
                export "${key}=$(cat "${env_dir}/${key}" | sed -e "s:\${build_dir}:${build}:")"
            fi
        done
    fi
}

expandVer() {
    local v="${1}"
    if [[ "${v}" =~ ^[[:digit:]]+ ]]; then
        v="go${v}"
    fi
    echo $(<${DataJSON} jq -r 'if .Go.VersionExpansion."'${v}'" then .Go.VersionExpansion."'${v}'" else "'${v}'" end')
}

step() {
    echo "$steptxt $@"
}

start() {
    echo -n "$steptxt $@... "
}

finished() {
    echo "done"
}

determinLocalFileName() {
    local fileName="${1}"
    local localName="jq"
    if [ "${fileName}" != "jq-linux64" ]; then #jq is special cased here because we can't jq until we have jq
        localName="$(<"${FilesJSON}" jq -r '."'${fileName}'".LocalName | if . == null then "'${fileName}'" else . end')"
    fi
    echo "${localName}"
}

SHAValid() {
    local fileName="${1}"
    local targetFile="${2}"
    local sh=""
    local sw="$(<"${FilesJSON}" jq -r '."'${fileName}'".SHA')"
    if [ ${#sw} -eq 40 ]; then
        sh="$(shasum "${targetFile}" | cut -d \  -f 1)"
    else
        sh="$(shasum -a256 "${targetFile}" | cut -d \  -f 1)"
    fi
    [ "${sh}" = "${sw}" ]
}

knownFile() {
    local fileName="${1}"
    if [ "${fileName}" == "jq-linux64" ]; then #jq is special cased here because we can't jq until we have jq
        true
    else
        <${FilesJSON} jq -e 'to_entries | map(select(.key == "'${fileName}'")) | any' &> /dev/null
    fi
}

downloadFile() {
    local fileName="${1}"

    if ! knownFile ${fileName}; then
        err ""
        err "The requested file (${fileName}) is unknown to the buildpack!"
        err ""
        err "The buildpack tracks and validates the SHA256 sums of the files"
        err "it uses. Because the buildpack doesn't know about the file"
        err "it likely won't be able to obtain a copy and validate the SHA."
        err ""
        err "To find out more info about this error please visit:"
        err "    https://devcenter.heroku.com/articles/unknown-go-buildack-files"
        err ""
        exit 1
    fi

    local targetDir="${2}"
    local xCmd="${3}"
    local localName="$(determinLocalFileName "${fileName}")"
    local targetFile="${targetDir}/${localName}"

    mkdir -p "${targetDir}"
    pushd "${targetDir}" &> /dev/null
        start "Fetching ${localName}"
            ${CURL} -O "${BucketURL}/${fileName}"
            if [ "${fileName}" != "${localName}" ]; then
                mv "${fileName}" "${localName}"
            fi
            if [ -n "${xCmd}" ]; then
                ${xCmd} ${targetFile}
            fi
            if ! SHAValid "${fileName}" "${targetFile}"; then
                err ""
                err "Downloaded file (${fileName}) sha does not match recorded SHA"
                err "Unable to continue."
                err ""
                exit 1
            fi
        finished
    popd &> /dev/null
}

ensureFile() {
    local fileName="${1}"
    local targetDir="${2}"
    local xCmd="${3}"
    local localName="$(determinLocalFileName "${fileName}")"
    local targetFile="${targetDir}/${localName}"
    local download="false"
    if [ ! -f "${targetFile}" ]; then
        download="true"
    elif ! SHAValid "${fileName}" "${targetFile}"; then
        download="true"
    fi
    if [ "${download}" = "true" ]; then
        downloadFile "${fileName}" "${targetDir}" "${xCmd}"
    fi
}

ensureGo() {
    local goVersion="${1}"
    local goPath="${cache}/${goVersion}/go"
    local goFile=""
    local txt="Installing ${goVersion}"
    if [ -d "${goPath}" ]; then
        step "Using ${goVersion}"
    else
        rm -rf ${cache}/* #For a go version change, we delete everything
        case "${goVersion}" in
            devel*)
                local bGoVersion="$(expandVer ${DefaultGoVersion})"
                goFile="${bGoVersion}.linux-amd64.tar.gz"
                goPath="${cache}/${bGoVersion}/go"
                txt="Installing bootstrap ${bGoVersion}"
            ;;
            go1)
                goFile="go.go1.linux-amd64.tar.gz"
            ;;
            *)
                goFile="${goVersion}.linux-amd64.tar.gz"
            ;;
        esac

        step "${txt}"
        ensureFile "${goFile}" "${goPath}" "tar -C ${goPath} --strip-components=1 -zxf"
        rm -f "${goPath}/${goFile}"

        case "${goVersion}" in
            devel*)
                pushd "${cache}" &> /dev/null
                    mkdir -p "${goVersion}"
                    pushd "${goVersion}" &> /dev/null
                        local sha=$(echo ${goVersion} | cut -d - -f 2)  #assumes devel-<short sha> or devel-<full sha>
                        local url="https://github.com/golang/go/archive/$sha.tar.gz"
                        start "Downloading development Go version ${goVersion}"
                            ${CURL} ${url} | tar zxf -
                            mv go-${sha}* go
                        finished
                        step "Compiling development Go version ${goVersion}"
                        pushd go/src &> /dev/null
                            echo "devel +${sha} $(date "+%a %b %H:%M:%S %G %z")"> ../VERSION
                            GOROOT_BOOTSTRAP=$(pushd ${cache}/${bGoVersion}/go > /dev/null; pwd; popd > /dev/null) ./make.bash 2>&1
                        popd &> /dev/null
                        go/bin/go version
                        rm -rf "${goPath}"
                    popd &> /dev/null
                popd &> /dev/null
                goPath="${cache}/${goVersion}/go"
            ;;
            *)
            ;;
        esac
    fi

    export GOROOT="${goPath}"
    PATH="${goPath}/bin:${PATH}"

    # Export GOCACHE if Go >= 1.10
    if go env | grep -q '^GOCACHE='; then
      export GOCACHE="${cache}/go-build-cache"
    finished
}

loadEnvDir "${env_dir}"

ver=$(expandVer $ver)

if [ -e "${build}/bin" -a ! -d "${build}/bin" ]; then
    exit 1
fi

ensureGo "${ver}"

mkdir -p "${build}/bin"

# If $GO_LINKER_SYMBOL and GO_LINKER_VALUE are set, tell the linker to DTRT
FLAGS=(-tags heroku)
if [ -n "${GO_LINKER_SYMBOL}" -a -n "${GO_LINKER_VALUE}" ]; then
    case "${ver}" in
        go1|go1.0.*|go1.1|go1.1.*|go1.2|go1.2.*|go1.3|go1.3.*|go1.4|go1.4.*)
            xval="${GO_LINKER_SYMBOL} ${GO_LINKER_VALUE}"
        ;;
        *)
            xval="${GO_LINKER_SYMBOL}=${GO_LINKER_VALUE}"
        ;;
    esac
    FLAGS=(${FLAGS[@]} -ldflags "-X ${xval}")
fi

export GOPATH